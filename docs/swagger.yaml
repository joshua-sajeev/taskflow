basePath: /api
definitions:
  common.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.CreateTaskRequest:
    properties:
      task:
        example: Buy milk
        maxLength: 20
        type: string
    required:
    - task
    type: object
  dto.DeleteTaskResponse:
    properties:
      message:
        example: Task deleted successfully
        type: string
    type: object
  dto.GetTaskResponse:
    properties:
      id:
        example: 1
        type: integer
      status:
        example: pending
        type: string
      task:
        example: Buy milk
        type: string
    type: object
  dto.ListTasksResponse:
    properties:
      tasks:
        items:
          $ref: '#/definitions/dto.GetTaskResponse'
        type: array
    type: object
  dto.UpdateStatusRequest:
    properties:
      status:
        enum:
        - pending
        - in-progress
        - completed
        example: completed
        type: string
    required:
    - status
    type: object
  dto.UpdateStatusResponse:
    properties:
      message:
        example: status updated
        type: string
    type: object
  task.Task:
    properties:
      created_at:
        example: "2025-08-27 10:35:16.263"
        type: string
      id:
        example: 1
        minimum: 1
        type: integer
      status:
        example: pending
        type: string
      task:
        example: Buy milk
        type: string
    required:
    - status
    - task
    type: object
host: localhost:8080
info:
  contact: {}
  description: API server for managing tasks in the TaskFlow application.
  title: TaskFlow API
  version: "1.0"
paths:
  /tasks:
    get:
      consumes:
      - application/json
      description: Get a list of all tasks
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks retrieved successfully
          schema:
            $ref: '#/definitions/dto.ListTasksResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: List all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with title and description
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/task.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Create a new task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      description: Delete a task by its ID
      parameters:
      - description: Task ID
        example: 1
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            $ref: '#/definitions/dto.DeleteTaskResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Delete a task
      tags:
      - tasks
    get:
      description: Returns details of a specific task by ID
      parameters:
      - description: Task ID (>=1)
        example: 1
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetTaskResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Get a task by ID
      tags:
      - tasks
  /tasks/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status field of a task by its ID
      parameters:
      - description: Task ID
        example: 1
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: Status payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Status updated successfully
          schema:
            $ref: '#/definitions/dto.UpdateStatusResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Update task status
      tags:
      - tasks
swagger: "2.0"
